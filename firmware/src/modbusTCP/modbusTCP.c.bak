#include "ch.h"
#include "hal.h"
#include "modbusTCP.h"
#include "modbusGet.h"
#include "modbusRegister.h"
#include "modbusFunc.h"

// Это связка lwip с chibios
#include <lwipthread.h>

// А это уже сам lwip. Там много всего есть, но я мало что понимаю
#include <lwip/netif.h>
#include <lwip/api.h>


/* ----------------------- MBAP Header --------------------------------------*/
/*
 *
 * <------------------------ MODBUS TCP/IP ADU(1) ------------------------->
 *              <----------- MODBUS PDU (1') ---------------->
 *  +-----------+---------------+------------------------------------------+
 *  | TID | PID | Length | UID  |Code | Data                               |
 *  +-----------+---------------+------------------------------------------+
 *  |     |     |        |      |
 * (2)   (3)   (4)      (5)    (6)
 *
 * (2)  ... MB_TCP_TID          = 0 (Transaction Identifier - 2 Byte)
 * (3)  ... MB_TCP_PID          = 2 (Protocol Identifier - 2 Byte)
 * (4)  ... MB_TCP_LEN          = 4 (Number of bytes - 2 Byte)
 * (5)  ... MB_TCP_UID          = 6 (Unit Identifier - 1 Byte)
 * (6)  ... MB_TCP_FUNC         = 7 (Modbus Function Code)
 *
 * (1)  ... Modbus TCP/IP Application Data Unit
 * (1') ... Modbus Protocol Data Unit
 */

  
uint8_t modbus_out_buf[100];

extern analog_node_t* current_analog;
extern discrete_node_t* current_discrete;
extern analog_node_t* Reg_analog_1;
extern discrete_node_t* Reg_discrete_1;

THD_WORKING_AREA(wa_tcp_server, 4096);


THD_FUNCTION(tcp_server, p) {

// Чтобы убрать ворнинги
  (void)p;

// Определим переменные. conn - внутреннее соединение, чтобы начать слушать порт
// newconn - внешнее соединение с тем кто постучится
  struct netconn *conn, *newconn;
  err_t err;
  struct netbuf* buf;
  uint8_t* data;
  uint16_t len;
  uint16_t answer_len;

// Запускаем соединение в режиме TCP
  conn = netconn_new(NETCONN_TCP);

// Поленился нормально прокинуть сюда адрес, поэтому определяю его заново. Он должен быть такй же как и в мейне
  struct ip4_addr ip;
  IP4_ADDR(&ip, 192, 168, 1, 123);
// Подключаемся к 80 порту
  netconn_bind(conn, &ip, 80);

// И начинаем его слушать
  netconn_listen(conn);

  while (true)
  {
    palToggleLine(LINE_LED3);
    // Ждем что кто-то подключится. Функция блокирующая
    err = netconn_accept(conn, &newconn);
    // Если кто-то подключился начинаем общение
    if (err == ERR_OK)
    {
       while ((err = netconn_recv(newconn, &buf)) == ERR_OK)
       {
         do
         {
           //Прием данных от клиента
           netbuf_data(buf,(void **)&data, &len);
           //Формирование ответа протокола ModbusTCP
           answer_len=modbustcp_go(data);
           //Отправка ответа клиенту
           netconn_write(newconn, out_buf, answer_len, NETCONN_NOCOPY);

         }
         //Пока соединение не закрыто
         while (netbuf_next(buf) >= 0);

         netbuf_delete(buf);
       }

       // После отключения закрываем соединение
       netconn_close(newconn);
       netconn_delete(newconn);
     }
  }

}

void modbustcp_init(void)
{
  //Создание аналоговых и дискретных регистров
  modbus_register_create();
  // Задаем адрес стмки
      lwipthread_opts_t opts;
      struct ip4_addr ip, gateway, netmask;
      IP4_ADDR(&ip, 192, 168, 1, 123);
      IP4_ADDR(&gateway, 192, 168, 1, 1);
      IP4_ADDR(&netmask, 255, 255, 255, 0);
  // Макадресс вроде может быть абсолютно любой. Главное чтобы в сети не было одинаковых
      uint8_t macaddr[6] = {0xC2, 0xAF, 0x51, 0x03, 0xCF, 0x46};

      opts.address = ip.addr;
      opts.gateway = gateway.addr;
      opts.netmask = netmask.addr;
      opts.macaddress = macaddr;
      opts.link_up_cb = NULL;
      opts.link_down_cb = NULL;


  // Запускаем сетевой драйвер. С этого момента на разьеме начнется индикация и стм будет пинговаться, если другой конец шнура в той же сети
  // Можем не передавать настройки, использовав NULL в качестве аргумента. Тогда будут использованы настройки по умолчанию из файла lwipthread.h
      lwipInit(&opts);
      chThdSleepSeconds(2);
}

void modbustcp_start(void)
{
  // Запустим поток сервера
  chThdCreateStatic(wa_tcp_server, 4096, NORMALPRIO, tcp_server, NULL);
}

int16_t modbustcp_go(uint8_t* data)
{
  int16_t tid, pid, address, count,len=0,value;
  uint8_t func, uid;
  current_analog=Reg_analog_1;
  current_discrete=Reg_discrete_1;
  tid=modbustcp_get_tid(data);
  pid=modbustcp_get_pid(data);
  uid=modbustcp_get_uid(data);
  func=modbustcp_get_func(data);
  address=modbustcp_get_address(data);
  count=modbustcp_get_count(data);
  if(uid==MY_ID)
  {
    switch(func)
    {
    case MB_Fun_Read_Analog_Input_Register:
    {
      while(current_analog!=NULL)
      {
        if(current_analog->address==address)
        {
          len=modbusTCP_Read_Analog_Input_Register(tid,pid,uid,func,count);
          return len; 
        }
        else
        {
          current_analog=current_analog->next;
        }
      }
    }
    break;
    case MB_Fun_Read_Analog_Output_Register:
    {
      while(current_analog!=NULL)
      {
        if(current_analog->address==address)
        {
          len=modbusTCP_Read_Analog_Output_Register(tid,pid,uid,func,count);
          return len; 
        }
        else 
          current_analog=current_analog->next;
      }
    }
    break;
    case 0x05:
    {
      while(current_discrete!=NULL)
      {
        if(current_discrete->address==address)
        {
          current_discrete->value=modbustcp_get_boll_value(data);
          len=modbusTCP_Write_Discrete_Register(tid,pid,uid,func,address,current_discrete->value);
          return len; 
        }
        else 
          current_discrete=current_discrete->next;
      }
    }
    break;
    case MB_Fun_Read_Discrete_Register:
    {
      while(current_discrete!=NULL)
      {
        if(current_discrete->address==address)
        {
          len=modbusTCP_Read_Discrete_Register(tid,pid,uid,func,count);
          return len; 
        }
        else 
          current_discrete=current_discrete->next;
      }
    }
    break;
    case MB_Fun_Write_Analog_Register:
    {
      while(current_analog!=NULL)
      { 
        if(current_analog->address==address)
        {
          value=modbustcp_get_value(data);
          current_analog->value=value;
          len=modbusTCP_Write_Analog_Register(tid,pid,uid,func, address,value);
          return len; 
        }
        else 
          current_analog=current_analog->next;
      }
    }
    break;
    }
  } 
  return len; 
}



